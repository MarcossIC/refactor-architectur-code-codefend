import React, { useMemo } from 'react';
import { Doughnut } from 'react-chartjs-2';
import { EmptyCard, PageLoader, BugIcon, Table, Show, SimpleSection } from '..';
import {
	IssuesShare,
	generateIDArray,
	isEmptyData,
	useDoughnutChart,
	MetricsService,
	ChartValueType,
	vulnerabilityRiskColumns,
} from '../../../data';
import { TableItem, TableV2 } from '../Table/tablev2';

interface VulnerabilityRiskProps {
	vulnerabilityByRisk: IssuesShare;
	isLoading: boolean;
}

export const VulnerabilityRisk: React.FC<VulnerabilityRiskProps> = ({
	vulnerabilityByRisk,
	isLoading,
}) => {
	const { chartData, otherMetrics, total, chartOptions } = useDoughnutChart({
		data: vulnerabilityByRisk,
		type: ChartValueType.PLAIN,
	});

	const dataEmptyState = useMemo(() => {
		const { total, ...otherMetrics } = vulnerabilityByRisk;
		return isEmptyData(otherMetrics);
	}, [vulnerabilityByRisk]);

	const { renderPercentage } = MetricsService;

	const tableColumns = useMemo(() => ['risk', 'count', 'percent'], []);

	const tableRows = useMemo(() => {
		return Object.keys(otherMetrics).map(
			(metric: string | number) =>
				({
					risk: { value: metric, style: 'risk' },
					count: {
						value: otherMetrics[metric as keyof typeof otherMetrics],
						style: 'count',
					},
					percent: {
						value: renderPercentage(
							String(otherMetrics[metric as keyof typeof otherMetrics]),
							String(total),
						),
						style: 'percent',
					},
				}) as Record<string, TableItem>,
		);
	}, [otherMetrics]);

	return (
		<div className="card risk-chart">
			<Show when={!isLoading} fallback={<PageLoader />}>
				<>
					<SimpleSection
						header="Vulnerabilities by risk"
						icon={<BugIcon />}>
						<div className="content">
							<Show when={!dataEmptyState} fallback={<EmptyCard />}>
								<>
									<div className="chart">
										<Doughnut
											data={chartData}
											options={chartOptions}
										/>
									</div>

									<TableV2
										rowsData={tableRows}
										columns={vulnerabilityRiskColumns}
										showRows={tableRows.length !== 0}
										sizeY={35}
									/>
								</>
							</Show>
						</div>
					</SimpleSection>
				</>
			</Show>
		</div>
	);
};
