import React, { useMemo } from 'react';
import { Doughnut } from 'react-chartjs-2';
import { EmptyCard, PageLoader, BugIcon, Table } from '../../../components';
import {
	IssuesShare,
	generateIDArray,
	isEmptyData,
	useDoughnutChart,
	ChartService,
	ChartValueType,
} from '../../../../data';

interface VulnerabilityRiskProps {
	vulnerabilityByRisk: IssuesShare;
	isLoading: boolean;
}

export const VulnerabilityRisk: React.FC<VulnerabilityRiskProps> = ({
	vulnerabilityByRisk,
	isLoading,
}) => {
	const { chartData, otherMetrics, total, chartOptions } = useDoughnutChart({
		data: vulnerabilityByRisk,
		type: ChartValueType.PLAIN,
	});

	const dataEmptyState = useMemo(() => {
		const { total, ...otherMetrics } = vulnerabilityByRisk;
		return isEmptyData(otherMetrics);
	}, [vulnerabilityByRisk]);

	const { renderPercentage } = ChartService;

	const tableColumns = useMemo(() => ['risk', 'count', 'percent'], []);

	const tableRows = useMemo(() => {
		return Object.keys(otherMetrics).map((metric: string | number) => {
			return {
				risk: metric,
				count: otherMetrics[metric as keyof typeof otherMetrics],
				percent: renderPercentage(
					String(otherMetrics[metric as keyof typeof otherMetrics]),
					String(total),
				),
			};
		});
	}, [otherMetrics]);

	return (
		<div className="card risk-chart">
			{!isLoading ? (
				<>
					<div className="header">
						<div className="title">
							<div className="icon">
								<BugIcon />
							</div>
							<span>Vulnerabilities by risk</span>
						</div>
					</div>
					<div className="content">
						{dataEmptyState ? (
							<>
								<EmptyCard />
							</>
						) : (
							<>
								<div className="chart">
									<Doughnut data={chartData} options={chartOptions} />
								</div>

								<Table columns={tableColumns} data={tableRows} />
							</>
						)}
					</div>
				</>
			) : (
				<>
					<PageLoader />
				</>
			)}
		</div>
	);
};
